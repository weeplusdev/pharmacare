// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  lineId          String         @unique
  displayName     String
  email           String?        @unique
  role            UserRole       @default(CUSTOMER)
  medicalLicenseId String?       @unique
  hospital        String?
  specialization  String?
  isVerified      Boolean        @default(false)
  phoneNumber     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orders          Order[]
  prescriptions   Prescription[] @relation("DoctorPrescriptions")
  addresses       Address[]
  cart            CartItem[]
}

enum UserRole {
  CUSTOMER
  DOCTOR
  ADMIN
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  image       String
  category    String
  requireRx   Boolean     @default(false)
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  prescriptionMedications PrescriptionMedication[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus
  totalAmount   Decimal     @db.Decimal(10, 2)
  address       Address     @relation(fields: [addressId], references: [id])
  addressId     String
  prescription  Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId String?
  orderItems    OrderItem[]
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  phone     String
  address   String
  province  String
  district  String
  postalCode String
  isDefault Boolean  @default(false)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id          String       @id @default(cuid())
  doctor      User         @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  doctorId    String
  patientName String
  patientId   String?
  diagnosis   String
  notes       String?
  status      PrescriptionStatus @default(PENDING)
  medications PrescriptionMedication[]
  orders      Order[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PrescriptionMedication {
  id             String      @id @default(cuid())
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId String
  product        Product     @relation(fields: [productId], references: [id])
  productId      String
  dosage         String
  frequency      String
  duration       String
  quantity       Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
  FILLED
}